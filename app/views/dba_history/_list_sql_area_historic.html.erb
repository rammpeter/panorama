<!--
  Template wird von mehreren Controller-Methoden verwendet !!!
-->
<%
   @update_area = get_unique_area_id


    def link_instance_selection(value, rec)
      ajax_link(value, {
                              :action               => :list_sql_area_historic,
                              :sql_id               => rec.sql_id,
                              :groupby_instance     => true,
                              :time_selection_start => @time_selection_start,
                              :time_selection_end   => @time_selection_end,
                              :update_area=> @update_area
                      },
                      :title=>'Show separate values per RAC instance' )
    end

    def link_column_sql(rec, value)
      link_historic_sql_id((rec.instance_count == 1 ? rec.instance_number : nil), rec.sql_id, @time_selection_start, @time_selection_end, @update_area, rec.parsing_schema_name, value)
    end

    def link_column_snap(result, value)
      ajax_link(value, {
                :action     => :list_sql_history_snapshots,
                :instance   => result.instance_number,
                :sql_id     => result.sql_id,
                :parsing_schema_name =>result.parsing_schema_name,
                :time_selection_start => @time_selection_start,
                :time_selection_end   => @time_selection_end,
                :update_area=> @update_area
              },
       :title=>t(:dba_history_list_sql_area_historic_link_column_snap_title, :default=>'Show values of single AWR snapshots (below)') )
    end

   def list_instance(rec)
     if rec.instance_count == 1                                                 # Genau eine konkrete Instance
       rec.instance_number
     else
       link_instance_selection("< #{rec.instance_count} >", rec)
     end
   end

   column_options =
    [
          {:caption=>"I",           :data=>proc{|rec| list_instance(rec) }, :title=>'Instance-ID if only one RAC instance affected or number of affected instances "< 2 >"' },
    ]
    # Anzeige Attribute aus explain plan bei Nutzung des Views f√ºr Result von show_using_sqls_historic
    column_options << {:caption=>"Operation",      :data=>proc{|rec| "#{rec.operation} #{rec.options}"}, :title=>"Operation", :data_title=>proc{|rec| "Operation: #{rec.other_tag}"} } if @sqls.count>0 && @sqls[0]["operation"] && @sqls[0]["options"]
    column_options.concat [
          {:caption=>"SQL-ID",      :data=>proc{|rec| link_column_sql(rec, rec.sql_id) },                                   :title=>"SQL-ID" },
          {:caption=>"SQL-Text",    :data=>proc{|rec| my_html_escape rec.sql_text },                                        :title=>"SQL-Text" },
          {:caption=>"P",           :data=>proc{|rec| rec.plans },                                                          :title=>"Number of different execution plans in SGA of instance for this SQL ID",  :align=>:right, :data_style=>proc{|rec| 'background-color:coral;' if rec.plans > 1 }  },
          {:caption=>"Parsing schema",   :data=>proc{|rec| rec.parsing_schema_name }, :title=>'Parsing schema name', :data_title=>proc{|rec| "%t = #{rec.parsing_schema_name}"}, max_wrap_width: 70 },
          {:caption=>t(:first_occurrence_caption, :default=>'First occurrence'), :data=>proc{|rec| localeDateTime(rec.first_occurrence)}, :title=>t(:first_occurrence_hint, :default=>'First occurrence within considered time period') },
          {:caption=>t(:last_occurrence_caption, :default=>'Last occurrence'),:data=>proc{|rec| localeDateTime(rec.last_occurrence) },    :title=>t(:last_occurrence_hint, :default=>'Last occurrence within considered time period') },
          {:caption=>'Snapshots',   :data=>proc{|rec| link_column_snap(rec, formattedNumber(rec.sample_count)) },           :title=>'Number of AWR snapshots', :align=>"right" },
          {:caption=>"Execs",       :data=>proc{|rec| formattedNumber(rec.executions) },                                    :title=>t(:dba_history_list_sql_area_historic_execs_hint, :default=>'Number of executions'), :align=>"right" },
          {:caption=>"Elapsed",     :data=>proc{|rec| formattedNumber(rec.elapsed_time_secs) },                             :title=>"Total elapsed time in Sec.", data_title: proc{|rec| "%t\n#{seconds_explain(rec.elapsed_time_secs)}" }, :align=>"right" },
          {:caption=>"Ela./Ex.",    :data=>proc{|rec| formattedNumber(rec.elapsed_time_secs_per_execute,4) },               :title=>"Elapsed time per execute in sec. (incl. parallel query slaves)", data_title: proc{|rec| "%t\n#{seconds_explain(rec.elapsed_time_secs_per_execute)}" }, :align=>"right" },
          {:caption=>"CPU",         :data=>proc{|rec| formattedNumber(rec.cpu_time_secs) },                                 :title=>"CPU-time in sec.", :align=>"right", :show_pct_hint=>true   },
          {:caption=>"Disk Reads",  :data=>proc{|rec| formattedNumber(rec.disk_reads) },                                    :title=>"Total disk reads", :align=>"right", :show_pct_hint=>true        },
          {:caption=>"Disk/Ex.",    :data=>proc{|rec| formattedNumber(rec.disk_reads_per_execute,3) },                      :title=>"Disk Reads per Execute", :align=>"right" },
          {:caption=>"Buffer Gets", :data=>proc{|rec| formattedNumber(rec.buffer_gets) },                                   :title=>"Total Buffer Gets", :align=>"right",     :show_pct_hint=>true },
          {:caption=>"Buffer/Ex.",  :data=>proc{|rec| formattedNumber(rec.buffer_gets_per_exec,2) },                        :title=>"Buffer Gets per execute", :align=>"right" },
          {:caption=>"Rows proc.",  :data=>proc{|rec| formattedNumber(rec.rows_processed) },                                :title=>"Number of rows processed", :align=>"right" },
          {:caption=>"Rows/Ex.",    :data=>proc{|rec| formattedNumber(rec.rows_processed_per_execute,2) },                  :title=>"Number of rows processed per execute", :align=>"right" },
          {:caption=>"Parses",      :data=>proc{|rec| formattedNumber(rec.parse_calls) },                                   :title=>strings(:parse_calls_title), :align=>"right" },
  ]

%>
<%=
    gen_slickgrid(@sqls, column_options, {
        :max_height => 450, show_pin_icon: 1,
        :caption    => "Statement history from #{PanoramaConnection.adjust_table_name('DBA_Hist_SQLStat')} executed between #{@time_selection_start} and #{@time_selection_end} #{"with access on object '#{"#{@object_owner}." if @object_owner}#{@object_name}'" if defined?(@object_name) && !@object_name.nil?}",
        update_area: @update_area
})
%>

