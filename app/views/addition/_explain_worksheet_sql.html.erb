



<%
  @update_area      = get_unique_area_id
  @grid_id          = get_unique_area_id                                     # DOM-ID des DIVs mit SlickGrid
  @indent_vector    = []

  link_real_num_rows = proc do |rec|
    object_type = rec.object_type
    object_type = 'INDEX' if !rec.object_type.nil? && rec.object_type['INDEX']

    if object_type == 'TABLE' || object_type == 'INDEX'
      update_area = "#{@update_area}_#{rec.id}"
      ajax_link(rec.num_rows ? fn(rec.num_rows) : "[No analyze]", {
                              :controller      => :storage,
                              :action          => :list_real_num_rows,
                              :owner           => rec.object_owner,
                              :name            => rec.object_name,
                              :object_type     => object_type,
                              :update_area     => update_area
                             },
                      :title=>"Count current number of rows in Table. CAUTION: May be long running!")+" <span id=\"#{update_area}\"></span>".html_safe
    else
      fn(rec.num_rows)
    end
  end

  analyzed_spec_title = proc do |rec|
    "\nLast_Analyzed = #{localeDateTime(rec.last_analyzed)}
Created = #{localeDateTime(rec.created)}
Last DDL = #{localeDateTime(rec.last_ddl_time)}
Last specification change = #{localeDateTime(rec.last_spec_ts)}
    ".html_safe
  end

  data_title_object_name = proc do |rec|
    output = "%t\n\n"
    output << "\nType = #{rec.object_type}"
    output << "\nAlias = #{rec.object_alias}"
    output << "\nQuery block name in plan_table = #{rec.qblock_name}" if rec.qblock_name
    output << "\nAlternative query block name = #{rec.qblock_name_short}"
    output << "\n#Other = #{rec.other}" if rec.other
    output << analyzed_spec_title.call(rec)
    output << "\n\nOptimizer hint usage:\n#{rec.hint_usage.gsub(/<\/?s>/, '')}" if rec.hint_usage
    output
  end

  column_options = []
  column_options << { caption: "Operation",     data: proc{|rec| list_tree_column_operation(rec, @indent_vector, @plans) }, :no_wrap=>true,                         title: 'Kind of data access', data_title: proc{|rec| "%t:\nOperation = #{rec.operation}\nOptions = #{rec.options}\n\n#{explain_data_access("#{rec.operation} #{rec.options}")}#{"\n\nOther = #{rec.other}" if rec.other }"}}
  column_options << { caption: "Query block",   data: proc{|rec| rec.qblock_name_short || rec.qblock_name},    :title=>'Name of the query block of this operation', data_title: proc{|rec| "%t\n\nQuery block name in plan table = '#{rec.qblock_name}'\nAlternative query block name = '#{rec.qblock_name_short}'"} } if explain_plan_col_setting['Query block']
  column_options << { caption: "ID",            data: proc{|rec| rec.id },  :align=>:right,                    :title=>'ID of operation',             :data_title=>proc{|rec| "%t: Parent_ID=#{rec.parent_id}"} }
  column_options << { caption: "R.",            data: proc{|rec| rec.execorder },  :align=>:right,             :title=>'Execution order of operation',    :data_title=>proc{|rec| "%t: ID=#{rec.id}\nParent_ID=#{rec.parent_id}"} }
  column_options << { caption: "Object-name",   data: proc{|rec| link_object_description(@update_area, rec.object_owner, rec.object_name, additional_tooltip: nil)}, :title=>'Name of accessed object', data_title: data_title_object_name, no_wrap: true, data_style: proc{|rec| 'background-color:lightpink;' if rec.wrong_hint_usage} }
  column_options << { caption: "Optimizer hint usage", data: proc{|rec| rec.hint_usage }, title: 'Optimizer hint usage', data_title: proc{|rec| "%t\n\n#{rec.hint_usage&.gsub(/<\/?s>/, '')   }"}}  if explain_plan_col_setting['Optimizer hint usage']
  column_options << { caption: "Rows",          data: link_real_num_rows,                                       title: "Number of rows of object (from analyze info)",     align: :right, data_title: proc{|rec| "%t\n#{analyzed_spec_title.call(rec)}"}  }
  column_options << { caption: "MB",            data: proc{|rec| fn(rec.mbytes) },                              title: "Size of object in MBytes",     align: :right }
  column_options << { caption: "Cost",          data: proc{|rec| fn(rec.cost) }, title: "Costs calculated by optimizer + additional optimizer calculations", align: :right, data_title: proc { |rec| cost_card_data_title(rec) } }
  column_options << { caption: 'Card.',         data: proc{|rec| fn(rec.cardinality) }, title: 'Estimated number of rows produced by the operation', align: :right, data_title: proc { |rec| cost_card_data_title(rec) } }
  column_options << { caption: "Partition start", data: proc{|rec| rec.partition_start },                       title: "Start partition of a range of accessed partitions" } if explain_plan_col_setting['Partition attributes']
  column_options << { caption: "Partition stop", data: proc{|rec| rec.partition_stop },                         title: "Stop partition of a range of accessed partitions" } if explain_plan_col_setting['Partition attributes']
  column_options << { caption: "Partition ID",  data: proc{|rec| rec.partition_id },                            title: "Step that computes the pair of values of the PARTITION_START and PARTITION_STOP columns" } if explain_plan_col_setting['Partition attributes']
  column_options << { caption: "Parallel",      data: proc{|rec| parallel_short(rec) },                         title: "Parallelization (from Other_Tag)", data_title: proc{|rec| "%t\n#{rec.other_tag}"} }
  column_options << { caption: "Access",        data: proc{|rec| my_html_escape expand_compare_spaces(rec.access_predicates) },   title: 'Access criteria for data object', :max_wrap_width=>500, :style=>"word-wrap: break-word;", :data_title=>proc{|rec| "%t:\n#{my_html_escape rec.access_predicates}#{"\nNumber of index columns with matching predicates = #{rec.search_columns}" if rec.search_columns }"} }
  column_options << { caption: "Filter",        data: proc{|rec| my_html_escape expand_compare_spaces(rec.filter_predicates) },   title: 'Filter criteria for data object (after access)',  :max_wrap_width=>500, :style=>"word-wrap: break-word;", :data_title=>proc{|rec| "%t:\n#{my_html_escape rec.filter_predicates}"} }
  column_options << { caption: 'Temp est.',     data: proc{|rec| fn(rec.temp_space.to_f/(1024*1024)) },                      title: "Temp-space in MB (estimated forecast by optimizer)", :align=>:right}
  column_options << { caption: "PQ distribution",  data: proc{|rec| rec.distribution},                             title: "Strategy of PQ-distribution"}
  column_options << { caption: "Proj.",         data: proc{|rec| my_html_escape expand_compare_spaces(rec.projection)}, title: "Projection: table- and index-columns gotten by this operation", :style=>"word-wrap: break-word;", :data_title=>proc{|rec| "%t:\n#{my_html_escape expand_compare_spaces(rec.projection)}"}, max_wrap_width: 80 } if explain_plan_col_setting['Projection']

  caption = "Execution plan created by EXPLAIN PLAN for SQL '#{my_html_escape @sql_statement.gsub("\n", ' ')[0,30]}"
  caption << "... " if @sql_statement.length > 30
  caption << "' "
  caption << "at #{localeDateTime(@plans[0].timestamp)}" if @plans.count > 0

  other_xml = @plans.select{|p| !p.other_xml.nil?}.first&.other_xml

  command_menu_entries = [
    {
      name:                  :additional_info,
      caption:               'Show additional info',
      :hint                  => "Show additional info for explain plan from column Other_XML of plan table",
      :icon_class            => 'cui-map',
      :show_icon_in_caption  => true,
      :action                => "ajax_html('#{@update_area}', 'addition', 'explain_worksheet_sql_additional_info', { other_xml: '#{my_html_escape(escape_js_single_quote(other_xml))}'});"
    },
  ].concat explain_plan_context_menu_entries

%>

<%= gen_slickgrid(@plans, column_options, {
  caption:            caption,
  max_height:         450,
  line_height_single: true,
  data_filter:        'explain_plan_filter_collapsed_item_rows',
  grid_id:            @grid_id,
  command_menu_entries: command_menu_entries,
  show_pin_icon:      1,
  update_area:        @update_area,
  context_menu_entries: explain_plan_context_menu_entries
})
%>

