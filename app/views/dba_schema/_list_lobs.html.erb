<%
  @update_area = get_unique_area_id

  link_size = proc do |rec|
    ajax_link(fn(rec.size_mb, 2),
                            {:action       => :list_space_usage,
                             :owner        => rec.owner,
                             :segment_name => rec.segment_name,
                             :update_area  => @update_area,
                            },
                    :title=>"Show space usage for LOB #{rec.segment_name} of table #{rec.owner}.#{rec.table_name} from DBMS_SPACE.SPACE_USAGE"
      )
  end

  link_lob_partitions = proc do |rec|
     if rec.partition_count == 0
       '0'
     else
       ajax_link(fn(rec.partition_count),
                               {:action       => :list_lob_partitions,
                                :owner        => rec.owner,
                                :table_name   => rec.table_name,
                                :lob_name      => rec.segment_name,
                                :update_area  => @update_area,
                               },
                       :title=>"Show partitions for LOB #{rec.segment_name} of table #{rec.owner}.#{rec.table_name}"
         )
     end
   end

   link_lob_subpartitions = proc do |rec|
     if rec.subpartition_count == 0
       '0'
     else
       ajax_link(fn(rec.subpartition_count),
                               {:action       => :list_lob_subpartitions,
                                :owner        => rec.owner,
                                :table_name   => rec.table_name,
                                :lob_name      => rec.segment_name,
                                :update_area  => @update_area,
                               },
                       :title=>"Show sub-partitions for LOB #{rec.segment_name} of #{rec.owner}.#{rec.table_name}"
       )
     end
   end

  render_action_buttons = proc do |rec|
    retval =
      "<div style=\"float:left\">#{
        ajax_submit('Segm. stats', {
          controller:   :dba_history,
          action:       :list_segment_stat_hist_detail,
          owner:        @owner,
          object_name:  rec.segment_name,
          update_area:  @update_area,
        }, :title => "Show segement statistics from #{PanoramaConnection.adjust_table_name('DBA_Hist_Seg_Stat')} for all recorded AWR snapshots for #{@owner}.#{rec.segment_name}"
        )}</div>"

    if get_cached_panorama_object_sizes_exists
      retval <<
        "<div style=\"float:left\">#{
          ajax_submit('Size evolution', {
            controller:   :addition,
            action:       :time_for_object_increase,
            owner:        @owner,
            name:         rec.segment_name,
            update_area:  @update_area,
          }, :title => "Show object size evolution for #{@owner}.#{rec.segment_name}"
          )}</div>
      "
    end

    retval
  end


  column_options = []
   column_options << {:caption=> 'Owner',               :data=>proc{|rec| rec.owner},                   :title=> 'LOB-Owner'}
   column_options << {:caption=> 'Table',               :data=>proc{|rec| rec.table_name},              :title=> 'Table LOB belongs to'}
   column_options << {:caption=> 'Column',              :data=>proc{|rec| rec.column_name},             :title=> 'Column LOB belongs to'}
   column_options << {:caption=> 'Segment name',        :data=>proc{|rec| rec.segment_name},            :title=> 'Name of the LOB segment'}
   column_options << {:caption=> 'Size (MB)',           :data=>link_size,                               :title=> 'Size of LOB segment in MB', :align=>:right}
   column_options << {:caption=> 'Blocks',              :data=>proc{|rec| fn(rec.blocks)},              :title=> 'Number of blocks of LOB segment', :align=>:right}
   column_options << {:caption=> 'Tablespace',          :data=>proc{|rec| rec.tablespace_name},         :title=> 'Name of the tablespace containing the LOB segment'}
   column_options << {:caption=> 'Index name',          :data=>proc{|rec| rec.index_name},              :title=> 'Name of the LOB index'}
   column_options << {:caption=> 'Chunk size (Bytes)',  :data=>proc{|rec| rec['chunk']},                :title=> 'Size (in bytes) of the LOB chunk as a unit of allocation or manipulation', :align=>:right}
   column_options << {:caption=> 'Pct version',         :data=>proc{|rec| rec.pctversion},              :title=> 'Maximum percentage of the LOB space used for versioning', :align=>:right}
   column_options << {:caption=> 'Retention',           :data=>proc{|rec| rec.retention},               :title=> 'Maximum time duration for versioning of the LOB space', :align=>:right}
   column_options << {:caption=> 'Free pools',          :data=>proc{|rec| rec.freepools},               :title=> 'Number of freepools for this LOB segment', :align=>:right}
   column_options << {:caption=> 'Cache',               :data=>proc{|rec| rec.cache},                   :title=> 'Indicates whether and how the cluster is to be cached in the buffer cache (YES, NO, CACHEREADS).\nIf not cached DML is synchroneous with DIRECT WRITE operations.'}
   column_options << {:caption=> 'Logging',             :data=>proc{|rec| rec.logging},                 :title=> 'Indicates whether changes to the LOB are logged (YES) or not (NO)' }
   column_options << {:caption=> 'Encrypt',             :data=>proc{|rec| rec.encrypt},                 :title=> 'Indicates whether or not the LOB is encrypted.' } if get_db_version >= '11.2'
   column_options << {:caption=> 'Compress.',           :data=>proc{|rec| rec.compression},             :title=> 'Level of compression used for this LOB.' } if get_db_version >= '11.2'
   column_options << {:caption=> 'Dedup.',              :data=>proc{|rec| rec.deduplication},           :title=> 'Kind of deduplication used for this LOB.' } if get_db_version >= '11.2'
   column_options << {:caption=> 'In row',              :data=>proc{|rec| rec.in_row},                  :title=> 'Indicates whether some of the LOBs are stored inline with the base row (YES) or not (NO). For partitioned objects, refer to the *_LOB_PARTITIONS and *_PART_LOBS views.' }
   column_options << {:caption=> 'Format',              :data=>proc{|rec| rec.format},                  :title=> 'Indicates whether the LOB storage format is dependent on the endianness of the platform' }
   column_options << {:caption=> 'Part.',               :data=>link_lob_partitions,                     :title=> "Number of partitions",    :align=>:right}
   column_options << {:caption=> 'Sub-Part.',           :data=>link_lob_subpartitions,                  :title=> "Number of subpartitions", :align=>:right}
   column_options << {:caption=> 'Secure file',         :data=>proc{|rec| rec.securefile},              :title=> 'Indicates whether the LOB is SecureFiles (YES) or not (NO)' } if get_db_version >= '11.2'
   column_options << {:caption=> 'Created',             :data=>proc{|rec| rec.segment_created},         :title=> 'Indicates whether the LOB segment has been created (YES) or not (NO)' } if get_db_version >= '11.2'
   column_options << {:caption=> 'Retention type',      :data=>proc{|rec| rec.retention_type},          :title=> 'Type of retention used for this LOB.' } if get_db_version >= '11.2.3'
   column_options << {:caption=> 'Retention value',     :data=>proc{|rec| fn(rec.retention_value)},     :title=> 'Minimum retention time (in seconds). This column is only meaningful for SecureFiles with RETENTION_TYPE set to MIN.', :align=>:right } if get_db_version >= '11.2.0.3'
   column_options << {:caption=> 'Action',              :data=>render_action_buttons,                   :title=> 'Call action for this LOB'}


   caption = 'LOB segments of '
   caption << @owner if @owner
   caption << ".#{@table_name}" if @table_name
%>

<%= gen_slickgrid(@lobs, column_options, {
                                  :caption => caption,
                                  :max_height => 450, show_pin_icon: 1
                          })
%>

<div id="<%= @update_area %>"></div>