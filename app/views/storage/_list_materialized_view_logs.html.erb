<%
@update_area = get_unique_area_id

def link_real_num_rows(rec)
  update_area = "list_materialized_view_logs_#{(rec.log_owner+rec.log_table).hash.abs}"
  ajax_link(rec.num_rows ? fn(rec.num_rows) : "[No analyze]", {
                          :action          => :list_real_num_rows,
                          :owner           => rec.log_owner,
                          :name            => rec.log_table,
                          :update_area     => update_area
                         },
                  :title=>"Show current number of rows in MV-log. CAUTION: May be long running!")+"<br><div id=\"#{update_area}\"></div>".html_safe
end

def link_snapshot_count(rec)
  ajax_link(fn(rec.snapshot_count), {
                          :action          => :list_snapshot_logs,
                          :log_owner       => rec.log_owner,
                          :log_table       => rec.log_table,
                          :update_area     => @update_area
                         },
                  :title=>"Show registered materialized view logs for this MV log from DBA_Snapshot_Logs")
end


column_options =
  [
    {:caption=>"Owner",                 :data=>proc{|rec| rec.log_owner},                                   :title=>"Owner of materialized view log"},
    {:caption=>"Master", :data=>proc{|rec| link_object_description(@update_area, rec.log_owner, rec.master, rec.master)}, :title=>"Name of master table of materialized view log"},
    {:caption=>"Log table", :data=>proc{|rec| link_object_description(@update_area, rec.log_owner, rec.log_table, rec.log_table)}, :title=>"Name of the table where the changes to the master table or master materialized view are logged"},
    {:caption=>"Num rows",              :data=>proc{|rec| link_real_num_rows(rec)},                         :title=>"Number of rows of this MView-log recorded at last analyze", :align=>:right},
    {:caption=>"Size (MB)",             :data=>proc{|rec| fn(rec.mbytes, 1)},                               :title=>"Real current physical size of materialized view log in MBytes", :align=>:right},
    {:caption=>"RowID",                 :data=>proc{|rec| rec.rowids},                                      :title=>"If YES, records rowid information"},
    {:caption=>"PKey",                  :data=>proc{|rec| rec.primary_key},                                 :title=>"If YES, records primary key information"},
    {:caption=>"Obj",                   :data=>proc{|rec| rec.has_object_id},                               :title=>"If YES, records object identifier information in an object table"},
    {:caption=>"Flt.",                  :data=>proc{|rec| rec.filter_columns},                              :title=>"If YES, records filter columns"},
    {:caption=>"Seq.",                  :data=>proc{|rec| rec.sequence},                                    :title=>"If YES, records the sequence value, which provides additional ordering information"},
    {:caption=>"New",                   :data=>proc{|rec| rec.include_new_values},                          :title=>"If YES, records both old and new values. If NO, records old values, but does not record new values."},
  ]
column_options << {:caption=>"Purge async.",            :data=>proc{|rec| rec.purge_asynchronous},              :title=>"Indicates whether the materialized view log is purged asynchronously (YES) or not (NO)"} if get_db_version >= "11.2"
column_options << {:caption=>"Purge def.",              :data=>proc{|rec| rec.purge_deferred},                  :title=>"Indicates whether the materialized view log is purged in a deferred manner (YES) or not (NO)"} if get_db_version >= "11.2"
column_options << {:caption=>"Purge start",             :data=>proc{|rec| localeDateTime rec.purge_start},      :title=>"For deferred purge, the purge start date"} if get_db_version >= "11.2"
column_options << {:caption=>"Purge interv.",           :data=>proc{|rec| rec.purge_interval},                  :title=>"For deferred purge, the purge interval"} if get_db_version >= "11.2"
column_options << {:caption=>"Last purge",              :data=>proc{|rec| localeDateTime rec.last_purge_date},  :title=>"Date of the last purge, either from refresh of oldest MV or explicit execution of DBMS_MVIEW.PURGE_LOG"} if get_db_version >= "11.2"
column_options << {:caption=>"Last purge stat.",        :data=>proc{|rec| rec.last_purge_status},               :title=>"Status of the last purge (error code or 0 for success)"} if get_db_version >= "11.2"
column_options << {:caption=>"Num. rows purged",        :data=>proc{|rec| fn rec.num_rows_purged},              :title=>"Number of rows purged in the last purge", :align=>:right} if get_db_version >= "11.2"
column_options << {:caption=>"SCN",                     :data=>proc{|rec| rec.commit_scn_based},                :title=>"Indicates whether the materialized view log is commit SCN-based (YES) or not (NO)"} if get_db_version >= "11.2"
column_options << {:caption=>"MView count",             :data=>proc{|rec| link_snapshot_count(rec)},            :title=>"Number of materialized views / snapshots registered on this MView-log", :align=>:right}
column_options << {:caption=>"Oldest refresh date",    :data=>proc{|rec| localeDateTime rec.oldest_refresh_date},:title=>"Date of oldest resfresh of MV-snapshot on this MV-log"}
column_options << {:caption=>"Last analyze",            :data=>proc{|rec| localeDateTime rec.last_analyzed},    :title=>"Last analyze date of this MView-log"}

%>

<%= gen_slickgrid(@logs, column_options, {
        :max_height => 450,
        :caption => "Materialized view logs from sys.DBA_MView_Logs#{", log owner=#{@log_owner}" if @log_owner}#{", log name=#{@log_name}" if @log_name}#{", master=#{@master}" if @master}",
        show_pin_icon: 1
}) %>

<div id="<%= @update_area %>"></div>
