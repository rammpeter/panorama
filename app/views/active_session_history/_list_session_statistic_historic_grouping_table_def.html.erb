<% @update_area = get_unique_area_id %>

<script type="text/javascript">

  function call_ajax_single_rows<%=@update_area%>(min_snap_id, max_snap_id, group_by_value, record_count){
    var json_data = <%= {:groupfilter => @groupfilter}.to_json.html_safe %>;
    if (min_snap_id)
      json_data['groupfilter']['Min_Snap_ID'] = min_snap_id;
    if (max_snap_id)
      json_data['groupfilter']['Max_Snap_ID'] = max_snap_id;
    json_data['groupfilter']['<%= @groupby %>'] = group_by_value;
    json_data['record_count'] = record_count;
    json_data['update_area'] = '<%= @update_area %>';

    ajax_html('<%= @update_area %>', 'active_session_history', 'list_session_statistic_historic_single_record', json_data);
    //jQuery.ajax({method: "POST", url: "active_session_history/list_session_statistic_historic_single_record", data: json_data});
  }

  function call_ajax_grouping<%=@update_area%>(min_snap_id, max_snap_id, group_by_value, next_group_by_name){
    var json_data = <%= {:groupfilter => @groupfilter}.to_json.html_safe %>;

    if (min_snap_id)
      json_data['groupfilter']['Min_Snap_ID'] = min_snap_id;
    if (max_snap_id)
      json_data['groupfilter']['Max_Snap_ID'] = max_snap_id;

    json_data['groupfilter']['<%= @groupby %>'] = group_by_value;
    json_data['groupby'] = next_group_by_name;
    json_data['update_area'] = '<%= @update_area %>';

    ajax_html('<%= @update_area %>', 'active_session_history', 'list_session_statistic_historic_grouping', json_data);
    //jQuery.ajax({method: "POST", url: "active_session_history/list_session_statistic_historic_grouping", data: json_data});
  }


</script>


<%
  @get_groupfilter = proc do |rec, groupby_column, groupby_value|
    groupfilter = @groupfilter.clone                                            # Sicherstellen ,dass Nachfolger noch relevanten Filter bekommen
    if rec.min_snap_id
      groupfilter["Min_Snap_ID"] = rec.min_snap_id
    else
      groupfilter.delete("Min_Snap_ID")                                        # Den Filter entfernen wenn im aktuellen Result keine Abgrenzung mehr möglich ist
    end
    if rec.max_snap_id
      groupfilter["Max_Snap_ID"] = rec.max_snap_id
    else
      groupfilter.delete("Max_Snap_ID")                                        # Den Filter entfernen wenn im aktuellen Result keine Abgrenzung mehr möglich ist
    end
    groupfilter.merge({ groupby_column => groupby_value})
  end


  # Alternativ-Variante für Aktualisierung des Links in Javascript
  @decorator_single_rows = proc do
    # Baue HREF in der Zelle mit Referenz auf Java-Funktion, die den Ajax-Aufruf enthält
    "
      var min_snap_id = dataContext[slickGrid.getColumnByName('min_snap_id').id]
      if (!min_snap_id){
        min_snap_id = 'null';
      }

      var max_snap_id = dataContext[slickGrid.getColumnByName('max_snap_id').id]
      if (!max_snap_id){
        max_snap_id = 'null';
      }

      var groupby_value = dataContext.col0.replace(new RegExp(\"&\", 'g'), \"\\\\&\");

      return '<a href=\"#\" title=\"#{"#{t(:active_session_history_samples_link_hint, :default=>'Show single samples of group')} #{@groupby}"}\" '+
        'onclick=\"call_ajax_single_rows#{@update_area}('+min_snap_id+', '+max_snap_id+', '+String.fromCharCode(39)+groupby_value+String.fromCharCode(39)+', '+slickGrid.parseFloatLocale(cell_value)+' ); return false;\"'+
         '>'+cell_value+'</a>'
    "
  end

  @show_groupkey_value = proc do |rec|
    if rec.group_value.nil?
      nil
    else
      # Zerlegen der ersten Spalten in Elemente für optionalen Link
      case @groupby
        when "DB Object"      then if rec.group_value['[Unknown]'].nil?; link_object_description(@update_area, rec.group_value.split(".")[0], rec.group_value.split(".")[1], rec.group_value); else rec.group_value; end
        when "DB Subobject"  then if rec.group_value['[Unknown]'].nil?; link_object_description(@update_area, rec.group_value.split(".")[0], rec.group_value.split(".")[1].split(" ")[0], rec.group_value); else rec.group_value; end
        when "Entry-PL/SQL", "PL/SQL"   then if rec.group_value['[Unknown]'].nil?
                                     full_obj = rec.group_value.split(" ")[1]
                                     link_object_description(@update_area, full_obj.split(".")[0], full_obj.split(".")[1], rec.group_value);
                                   else
                                     rec.group_value
                                   end
        when 'Machine'        then link_machine_ip_info(@update_area, rec.group_value)
        when "SQL-ID"         then link_historic_sql_id(rec.instance_number_cnt == 1 ? rec.instance_number : nil,
                                                        rec.sql_id,
                                                        @groupfilter[:time_selection_start],
                                                        @groupfilter[:time_selection_end],
                                                        @update_area,
                                                        rec.username_cnt == 1 ? rec.username : nil
        )
        when "Top Level SQL-ID"  then link_historic_sql_id(rec.instance_number_cnt == 1 ? rec.instance_number : nil,
                                                      rec.top_level_sql_id,
                                                      @groupfilter[:time_selection_start],
                                                      @groupfilter[:time_selection_end],
                                                      @update_area,
                                                      rec.username_cnt == 1 ? rec.username : nil
      )
        when 'Blocking Session' then ajax_link(rec.group_value, {
                                                                  action: :list_session_statistic_historic_grouping,
                                                                  groupfilter: {
                                                                                  Instance:             rec.group_value.split(':')[0],
                                                                                  Session_ID:           rec.group_value.split(':')[1].split(',')[0],
                                                                                  Serial_No:             rec.group_value.split(':')[1].split(',')[1],
                                                                                  Idle_Wait1:           'PX Deq Credit: send blkd',
                                                                                  DBID:                 @groupfilter[:DBID],
                                                                                  time_selection_start: @groupfilter[:time_selection_start],
                                                                                  time_selection_end:   @groupfilter[:time_selection_end],
                                                                                  Min_Snap_ID:          rec.min_snap_id,
                                                                                  Max_Snap_ID:          rec.max_snap_id,
                                                                            },
                                                                  :groupby      => 'Session/Sn.',
                                                                  :update_area  => @update_area
                                                                },
                                               title: 'Show history of blocking session in Active Session History'
      )
      when 'Transaction' then ajax_link(rec.group_value, {
                                                            controller:   :storage,
                                                            action:       :list_transaction_history,
                                                            xid:          rec.group_value,
                                                            update_area:  @update_area
                                                         },
                                               title: 'Show history of transaction from Flashback_Transaction_Query'
      )
      else rec.group_value
      end
    end
  end

  # Alternativ-Variante für Aktualisierung des Links in Javascript
  def decorator_grouping(next_groupby)
    # Baue HREF in der Zelle mit Referenz auf Java-Funktion, die den Ajax-Aufruf enthält
    # dataContext.col0: 1. Spalte des Results enthält den group-Value
    "
      var decorated_cell_value = '';

      var cnt_column = slickGrid.all_columns[parseInt(columnDef.index) - 1]
      var cnt_value = dataContext[cnt_column.id];

      if (parseInt(cnt_value) > 1){
        decorated_cell_value = '<&nbsp;'+cnt_value+'&nbsp;>';
      } else {
        decorated_cell_value = cell_value;

        // Einsetzen von optionalen Umbruch-Stellen in Strings
        // console.log(columnDef['name']+' '+columnDef['sort_type']);
        if (columnDef['sort_type'] == 'string'){

            decorated_cell_value = decorated_cell_value.replace('.', '.<wbr>');                       // Optionaler Wort-Umbruch
        }
      }

      var min_snap_id = dataContext[slickGrid.getColumnByName('min_snap_id').id]
      if (!min_snap_id){
        min_snap_id = 'null';
      }

      var max_snap_id = dataContext[slickGrid.getColumnByName('max_snap_id').id]
      if (!max_snap_id){
        max_snap_id = 'null';
      }

      // escape ampersand and doublequote
      var groupby_value = dataContext.col0.replace(new RegExp(\"&\", 'g'), \"\\\\&\").replace(new RegExp(String.fromCharCode(34), 'g'), \"'+String.fromCharCode(34)+'\");
      //var groupby_value = jQuery(dataContext.col0).text();

      return '<a href=\"#\" title=\"#{"#{t(:active_session_history_list_session_statistic_historic_grouping_link_hint, :default=>"Show different")} #{next_groupby}s #{t(:of, :default=>"of")} #{@groupby}s"}\" '+
        'onclick=\"call_ajax_grouping#{@update_area}('+min_snap_id+', '+max_snap_id+', '+String.fromCharCode(39)+groupby_value+String.fromCharCode(39)+', '+String.fromCharCode(39)+'#{next_groupby}'+String.fromCharCode(39)+'); return false;\"'+
         '>'+decorated_cell_value+'</a>'
    "
  end


  @link_temp_and_pga_usage = proc do |rec, value|
    ajax_link(value,     # Verhindern Zeilenumbruch in Anzeige
                    {:action  => :list_temp_usage_historic,
                     :groupfilter  => @get_groupfilter.call(rec, @groupby, rec.group_value),
                     :time_groupby => :day,
                     :update_area  => @update_area,
                            },
                    :title=>"Show total TEMP and PGA usage for current filters"
    )
  end

  @show_info = proc do |value|
    if value.class == DateTime || value.class == Time
      localeDateTime value
    else
      my_html_escape value
    end
  end

  # Berechnung average load aus rec
  @avg_load = proc do |rec|
    rec.time_waited_secs.to_f/(rec.sample_dauer_secs>0 ? rec.sample_dauer_secs : rec.max_sample_cycle)
  end

  @total_time_waited_data_title = proc do |rec|
    retval = '%t'
    retval << "\n= #{fn(rec.time_waited_secs)} seconds"
    retval << "\n= #{fn(rec.time_waited_secs.to_f/60, 1)} minutes" if rec.time_waited_secs > 60
    retval << "\n= #{fn(rec.time_waited_secs.to_f/3600, 1)} hours" if rec.time_waited_secs > 3600
    retval
  end

  avg_time_waited_data_title = proc do|rec|
    "%t\n#{seconds_explain(rec.time_waited_avg_ms.to_f/1000)}\n\nMinimum wait time = #{seconds_explain(rec.time_waited_min_ms.to_f/1000, true)}\n\nMaximum wait time = #{seconds_explain(rec.time_waited_max_ms.to_f/1000, true)}"
  end

  duration_data_title = proc do |rec|
    "%t\n\nTime between first and last occurrence\n= #{fn(rec.sample_dauer_secs)} seconds\n= #{fn(rec.sample_dauer_secs.to_f / 60 , 1)} minutes\n= #{fn(rec.sample_dauer_secs.to_f / (60*60), 1)} hours\n= #{fn(rec.sample_dauer_secs.to_f / (60*60*24), 1)} days"
  end


  @column_options = []
  @column_options << {:caption=>session_statistics_key_rule(@groupby)[:Name],         :data=>proc{|rec| @show_groupkey_value.call(rec)},                    :title=>session_statistics_key_rule(@groupby)[:Title], :data_title=>session_statistics_key_rule(@groupby)[:Data_Title]}
  @column_options << {:caption=>session_statistics_key_rule(@groupby)[:info_caption], :data=>proc{|rec| @show_info.call(rec.info) },                       :title=>"#{t(:active_session_history_last_occurrence_caption, :default=>'Further info for grouping criteria')}: #{@groupby}", :data_title=>proc{|rec| rec.info_hint} } if session_statistics_key_rule(@groupby)[:info_caption]
  @column_options << {:caption=>"Total Time waited",                                  :data=>proc{|rec| fn(rec.time_waited_secs) },     :title=>t(:active_session_history_total_time_waited_hint, :default=>"Total time waited in seconds (sample-cycle(1/10 seconds) * samples)"), data_title: proc{|rec| "%t\n#{seconds_explain(rec.time_waited_secs)}"}, :align=>"right", :show_pct_hint=>true, :show_pct_background=>true}
  @column_options << {:caption=>"Avg. Load",                                          :data=>proc{|rec| fn(@avg_load.call(rec),2) },            :title=>t(:active_session_history_load_hint, :default=>"Avg. number of waiting sessions averaged by time between first and last occurrence"), :align=>"right"}
  @column_options << {:caption=>t(:active_session_history_first_occurrence_caption, :default=>"First occurrence"), :data=>proc{|rec| localeDateTime(rec.first_occurrence) },      :title=>t(:active_session_history_first_occurrence_hint, :default=>"First occurrence of sample record in group"), data_title: duration_data_title}
  @column_options << {:caption=>t(:active_session_history_last_occurrence_caption,  :default=>"Last occurrence"),  :data=>proc{|rec| localeDateTime(rec.last_occurrence) },       :title=>t(:active_session_history_last_occurrence_hint,  :default=>"Last occurrence of sample record in group"), data_title: duration_data_title}
  @column_options << {:caption=>"Avg. Time waited",                                   :data=>proc{|rec| fn(rec.time_waited_avg_ms,2)},    :title=>"Avg. time in milliseconds that the current session actually spent waiting for the event.\nThis column is set for waits that were in progress at the time the sample was taken.", data_title: avg_time_waited_data_title, :align=>"right"}
  @column_options << {:caption=>"Samples",                                            :data=>proc{|rec| fn(rec.count_samples) },          :title=>t(:active_session_history_samples_hint, :default=>"Total number of sample records in group"), :align=>:right, :field_decorator_function=> @decorator_single_rows.call}

  @column_options << {:caption=>'min_snap_id', :data=>proc{|rec| rec.min_snap_id}, :hidden=>:true}
  @column_options << {:caption=>'max_snap_id', :data=>proc{|rec| rec.max_snap_id}, :hidden=>:true}
  session_statistics_key_rules.each do |key, value|
    unless @groupby == key  || @groupfilter[key.to_sym]            # Aktuelles oder früheres Gruppierungskriterium weglassen
      @column_options << {:caption=>"#{value[:Name]}_Cnt", :data=>proc{|rec| rec["#{value[:sql_alias]}_cnt"]}, :hidden=>:true}
      @column_options << {:caption=>value[:Name], :data=>proc{|rec| rec[value[:sql_alias]] } , :title=>"#{value[:Title]}\n#{t(:active_session_history_number_hint, :default=>"(< Number of occurrences> if there are multiple occurrences)")}", :data_title=>(value[:Data_Title] ? "#{value[:Title]}:#{value[:Data_Title]}" : nil) , :field_decorator_function=>decorator_grouping(key)}
    end
  end


  @column_options << {:caption=>"Avg. PGA", :data=>proc{|rec| fn(rec.avg_pga_mb,2)},                                :title=>"Avg. amount of PGA in MB allocated per session",                           :align=>"right"}   if get_db_version >= "11.2"
  @column_options << {:caption=>"Max. PGA", :data=>proc{|rec| @link_temp_and_pga_usage.call(rec, fn(rec.max_pga_mb,2))},  :title=>"Max. amount of PGA in MB allocated by one single session",                 :align=>"right"}   if get_db_version >= "11.2"
  @column_options << {:caption=>"Avg. Temp",:data=>proc{|rec| fn(rec.avg_temp_mb,2)},                               :title=>"Avg. amount of temp. tablespace in MB allocated per session",              :align=>"right"}   if get_db_version >= "11.2"
  @column_options << {:caption=>"Max. Temp",:data=>proc{|rec| @link_temp_and_pga_usage.call(rec, fn(rec.max_temp_mb,2))}, :title=>"Max. amount of temp. tablespace in MB allocated by one single session",    :align=>"right"}   if get_db_version >= "11.2"
  @column_options << {:caption=>"CPU-Time", :data=>proc{|rec| fn(rec.tm_cpu_time_secs)},                            :title=>"Amount of time in seconds sampled sessions spent on CPU (per session)",    :align=>:right}    if get_db_version >= "11.2"
  @column_options << {:caption=>"DB-Time",  :data=>proc{|rec| fn(rec.tm_db_time_secs)},                             :title=>"Amount of time in seconds sampled sessions spent in database calls",       :align=>:right}    if get_db_version >= "11.2"
  @column_options << {:caption=>"Rd. Rq.",  :data=>proc{|rec| fn(rec.delta_read_io_requests)},                      :title=>"Number of read I/O requests made by the scanned sessions",                 :align=>"right"}   if get_db_version >= "11.2"
  @column_options << {:caption=>"Wr. Rq.",  :data=>proc{|rec| fn(rec.delta_write_io_requests)},                     :title=>"Number of write I/O requests made by the scanned sessions",                :align=>"right"}   if get_db_version >= "11.2"
  @column_options << {:caption=>"Rd. kB.",  :data=>proc{|rec| fn(rec.delta_read_io_kbytes)},                        :title=>"Number of I/O kBytes read by the scanned sessions",                        :align=>"right"}   if get_db_version >= "11.2"
  @column_options << {:caption=>"Wr. kB.",  :data=>proc{|rec| fn(rec.delta_write_io_kbytes)},                       :title=>"Number of I/O kBytes written by the scanned sessions",                     :align=>"right"}   if get_db_version >= "11.2"
  @column_options << {:caption=>"IC. kB.",  :data=>proc{|rec| fn(rec.delta_interconnect_io_kbytes)},                :title=>"Number of I/O kBytes sent over the I/O interconnect by the scanned sessions", :align=>"right"} if get_db_version >= "11.2"
%>

<%=
    @hidden_link_timeline_id = get_unique_area_id
    @timechart_area          = get_unique_area_id

    context_menu_entries = []
    command_menu_entries = [get_recall_params_info_for_render_page_caption]

    def create_context_menu_entry(seconds, context_menu_entries, command_menu_entries, icon_class)
      label   = t(:active_session_history_show_top_ten, :sec=>seconds, :default=>"Show Top 10 in time chart, condensed by %{sec} seconds")
      hint    = t(:active_session_history_show_top_ten_hint, :sec=>seconds, :default=>"Show Top 10 ordered by total time waited in time chart, each point in graph for sum over %{sec} seconds")
      action  = "$('##{@hidden_link_timeline_id}_#{seconds}').click();"

      context_menu_entries << {
                                :label   => label,
                                :hint    => hint,
                                :ui_icon => icon_class,
                                :action  => action
                              }

      command_menu_entries << {
                                name:                 "command_menu_timeline_#{seconds}",
                                caption:              label,
                                hint:                 hint,
                                icon_class:           icon_class,
                                show_icon_in_caption: true,
                                action:               action
                              }
    end

    create_context_menu_entry(60, context_menu_entries, command_menu_entries, 'cuis-chart-area')
    create_context_menu_entry(10, context_menu_entries, command_menu_entries, 'cui-chart-area')
    create_context_menu_entry(1, context_menu_entries, command_menu_entries,  'cui-chart-line')


    gen_slickgrid(@sessions,
                   @column_options,
                   {
                       :caption => @caption ? @caption : "",
                       :max_height => 450,
                       :context_menu_entries => context_menu_entries,
                       :command_menu_entries => command_menu_entries,
                       show_pin_icon:       1,
                       direct_update_area:  @timechart_area,
                       update_area:         @update_area
                  }
                  )

 %>

<%
  @link_timeline = proc do |group_seconds|
    ajax_link("Hidden Auslöser für Timeline",
                            {:action        => "list_session_statistic_historic_timeline",
                             :groupfilter   => @groupfilter,
                             :groupby       => @groupby,
                             :group_seconds => group_seconds,
                             :update_area   => @timechart_area
                            },
                    :style=>"display:none",
                    :id=>"#{@hidden_link_timeline_id}_#{group_seconds}"
    )
  end

%>

<%= @link_timeline.call(60) %>
<%= @link_timeline.call(10) %>
<%= @link_timeline.call( 1) %>


