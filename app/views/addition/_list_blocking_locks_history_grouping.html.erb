<%
# Eindeutige DIV-ID bei mehrfacher rekursiver Nutzung des Screeens
@update_area = get_unique_area_id

def link_column_sql_id(instance, sql_id, child_number)
  link_historic_sql_id(instance, sql_id, @groupfilter[:Min_Timestamp], @groupfilter[:Max_Timestamp], @update_area, nil)
end


def link_column(rec, value, newgroupkey, action, linktitle)
  ajax_link(value,
              {:action       => action,
               :groupfilter  => @groupfilter.merge({@groupkey => rec.group_value}),
               :update_area  => @update_area
              }.merge(newgroupkey),
       :title=>linktitle)
end

def link_column_single(rec, value)
  link_column(rec, value, {}, "list_blocking_locks_history_single_record", "Show single snapshot records of grouping")
end

def link_column_grouping(rec, name)
  col_alias = blocking_locks_groupfilter_values(name)[:alias] || name.downcase
  col_min = "#{col_alias}_min"
  col_cnt = "#{col_alias}_cnt"


  # Nur als Link anzeigen, wenn mehrere Treffer vorhanden (Muster "< Anzahl >")
  case rec[col_cnt]
  when 0
    ''
  when 1
    case name
    when "SID"
      link_column_blocking_reason_cascade(rec, rec[col_min])
    when "SQL-ID" then
      if rec.instance_number_cnt > 1 || rec.sql_child_number_cnt > 1
        rec[col_min]
      else
        link_column_sql_id(rec.instance_number_min, rec.sql_id_min, rec.sql_child_number_min)
      end
    when "B.SQL-ID" then
      if rec.blocking_instance_number_cnt > 1 || rec.blocking_sql_child_number_cnt > 1
        rec[col_min]
      else
        link_column_sql_id(rec.blocking_instance_number_min, rec.blocking_sql_id_min, rec.blocking_sql_child_number_min )
      end
    when "B.SID"
      if rec.blocking_instance_number_cnt > 1 || rec.blocking_sid_cnt > 1 || rec.blocking_serial_no_cnt > 1
        rec[col_min]
      else
        link_column_blocked(rec)
      end
    when 'Blocking Object'
      link_object_description(@update_area, rec.blocking_object_min.split('.')[0], rec.blocking_object_min.split('.')[1])
    else rec[col_min]
    end
  else
    link_column(rec, "<&nbsp;#{rec[col_cnt]}&nbsp;>".html_safe, {:groupkey => name}, :list_blocking_locks_history_grouping, "Show samples of this group row grouped by #{name}")
  end
end


def link_column_blocking_reason_cascade(rec, value)
  retval = ''
  retval << ajax_link(rec.sid_min, {
                        controller:  :active_session_history,
                        action:     :list_session_statistic_historic_grouping,
                        groupfilter: {
                          DBID:                 get_dbid,
                          Instance:             rec.instance_number_min,
                          Session_ID:           rec.sid_min,
                          Serial_No:             rec.serial_no_min,
                          Idle_Wait1:           'PX Deq Credit: send blkd',
                          time_selection_start: localeDateTime(rec.min_snapshot_timestamp),
                          time_selection_end:   localeDateTime(rec.max_snapshot_timestamp),
                        },
                        :groupby      => 'Session/Sn.',
                        :update_area  => @update_area
                      }, title: "Show Active Session History of this session with serial# = '#{rec.serial_no_min}'"
  )
  retval << ' '
  retval << ajax_submit('Blockers',
                        {:action                => "list_blocking_reason_cascade",
                         :update_area           => @update_area,
                         :snapshot_timestamp    => localeDateTime(rec.max_snapshot_timestamp),
                         :instance              => rec.instance_number_min,
                         :sid                   => rec.sid_min,
                         :serial_no              => rec.serial_no_min
                        },
                        {:title => "Show full cascade of blockers for this session at the last snapshot of period"},
                        style: 'display:inline;'
  ) if rec.sid_min
  retval
end

def link_column_blocked(rec)
  retval = ''
  retval << ajax_link(rec.blocking_sid_min, {
    controller:  :active_session_history,
    action:     :list_session_statistic_historic_grouping,
    groupfilter: {
      DBID:                 get_dbid,
      Instance:             rec.blocking_instance_number_min,
      Session_ID:           rec.blocking_sid_min,
      Serial_No:             rec.blocking_serial_no_min,
      Idle_Wait1:           'PX Deq Credit: send blkd',
      time_selection_start: localeDateTime(rec.min_snapshot_timestamp),
      time_selection_end:   localeDateTime(rec.max_snapshot_timestamp),
    },
    :groupby      => 'Session/Sn.',
    :update_area  => @update_area
  }, title: "Show Active Session History of this session with serial# = '#{rec.blocking_serial_no_min}'"
  )
  retval << ' '
  retval << ajax_submit('Blocked', {
                          :action             => 'list_blocking_locks_history_hierarchy_detail',
                          :update_area        => @update_area,
                          :snapshot_timestamp => localeDateTime(rec.max_snapshot_timestamp),
                          :blocking_instance  => rec.blocking_instance_number_min,
                          :blocking_sid       => rec.blocking_sid_min,
                          :blocking_serial_no  => rec.blocking_serial_no_min
                        },
                        { :title=>'Show sessions blocked by this session at the last snapshot of period'},
                        style: 'display:inline;'
  ) if rec.blocking_sid_min
  retval
end


column_options =
  [
    {:caption=>"Min. Timestamp",  :data=>proc{|rec| localeDateTime(rec.min_snapshot_timestamp)},            :title=>"Smallest snapshot timestamp in considered period"},
    {:caption=>"Max. Timestamp",  :data=>proc{|rec| localeDateTime(rec.max_snapshot_timestamp)},            :title=>"Largest snapshot timestamp in considered period"},
    {:caption=>"B. Inst.",        :data=>proc{|rec| link_column_grouping(rec, 'B.Instance')},               :title=>"Instance of blocking session (or number if multiple)"},
    {:caption=>"B. SID",          :data=>proc{|rec| link_column_grouping(rec, 'B.SID')},                    :title=>"SID of blocking session (or number if multiple)"},
    {:caption=>"B. SQL-ID",       :data=>proc{|rec| link_column_grouping(rec, 'B.SQL-ID')},                 :title=>"SQL-ID of blocking session (or number if multiple)"},
    {:caption=>"B. Event",        :data=>proc{|rec| link_column_grouping(rec, 'Blocking_Event')},           :title=>"Wait event of blocking session (or number if multiple)", data_title: proc{|rec| "%t\n\n#{explain_wait_event(rec.blocking_event_min) if rec.blocking_event_cnt == 1}"}},
    {:caption=>"B. Status",       :data=>proc{|rec| link_column_grouping(rec, 'Blocking_Status')},          :title=>"Status of blocking session (or number if multiple)"},
    {:caption=>"Wait (Sec.)",     :data=>proc{|rec| formattedNumber(rec.seconds_in_wait)},                  :title=>"Number of seconds sessions are waiting", :align=>"right", data_title: proc{|rec| "%t\n#{seconds_explain(rec.seconds_in_wait)}"}},
    {:caption=>"Samples",         :data=>proc{|rec| link_column_single(rec, "< #{formattedNumber(rec.samples,0)} >")}, :title=>"Number of recorded snapshot samples", :align=>"right"},
    {:caption=>"Blocking object", :data=>proc{|rec| link_column_grouping(rec, 'Blocking Object')},          :title=>"Schema and name of blocking object (or number if multiple)"},
    {:caption=>"RowID",           :data=>proc{|rec| link_column_grouping(rec, 'RowID')},                    :title=>"RowID of blocking object (or number if multiple)"},
    {:caption=>"W. Inst.",        :data=>proc{|rec| link_column_grouping(rec, 'Instance')},                 :title=>"Instance of blocked session (or number if multiple)"},
    {:caption=>"W. SID",          :data=>proc{|rec| link_column_grouping(rec, 'SID')},                      :title=>"SID of blocked session (or number if multiple)"},
    {:caption=>"W. SQL-ID",       :data=>proc{|rec| link_column_grouping(rec, 'SQL-ID')},                   :title=>"SQL-ID of blocked session (or number if multiple)"},
    {:caption=>"W. Event",        :data=>proc{|rec| link_column_grouping(rec, 'Event')},                    :title=>"Wait event of blocked session (or number if multiple)", data_title: proc{|rec| "%t\n\n#{explain_wait_event(rec.event_min) if rec.event_cnt == 1}"}},
    {:caption=>"W. Module",       :data=>proc{|rec| link_column_grouping(rec, 'Module')},                   :title=>"Module of blocked session (or number if multiple)"},
    {:caption=>"LT",              :data=>proc{|rec| link_column_grouping(rec, 'Locktype')},                 :title=>"Lock type of blocked session (or number if multiple)", data_title: proc{|rec| "%t\n#{lock_types(rec.lock_type_min) if rec.lock_type_cnt == 1}" }},
    {:caption=>"R",               :data=>proc{|rec| link_column_grouping(rec, 'Request')},                  :title=>"Requested lock mode of blocked session (or number if multiple)", data_title: proc{|rec| "%t\n#{lock_modes(rec.request_min) if rec.request_cnt == 1}"} },
    {:caption=>"L",               :data=>proc{|rec| link_column_grouping(rec, 'LockMode')},                 :title=>"Held lock mode of blocked session (or number if multiple)", data_title: proc{|rec| "%t\n#{lock_modes(rec.lock_mode_min) if rec.lock_mode_cnt == 1}"}},
    {:caption=>"W. Object name",  :data=>proc{|rec| link_column_grouping(rec, 'Objectname')},               :title=>"Objectname of blocked session (or number if multiple)"},
  ]
%>

<%=
    caption = "Blocking Locks: Grouped by #{@groupkey}, Filter: "
    @groupfilter.each {|key,value|
            caption << " #{key} = '#{value}' "
    }

 gen_slickgrid(@locks, column_options, {
        :caption => caption,
        :max_height => 450,
        show_pin_icon: 1,
        update_area:   @update_area
 }) %>

