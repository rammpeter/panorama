<%  # Die folgende Logik liegt hier, da sonst nicht auf ActionView-Helper zurückgegriffen werden kann
    instance_captions = ['instance', 'inst_id']
    sid_captions = ['sid']
    serial_number_captions = ['serial number', 'serial#']
    sql_id_captions = ['sql_id', 'sql-id', 'max_sql_id']

if @res.count > 0
    @column_options = []

      i = 0
      @res[0].each do |key, value|   # Iteration über Spalten der ersten Zeile
        i += 1
        @column_options << {:caption=>key,
                           :title=>key,
                           #:data_title=>proc{|rec| "#{key}: Classname=#{rec[key].class.name}"}
        }
        raise "Problem with column #{i} of SQL result! Column header is empty.\nSQL columns identifier may not be processable by ActiveRecord." if key.nil?
      end

      # Ermitteln der anzahl Nachkommastellen einer Zahl
      def scale_count(number)
        number = number.to_s
        index = number.index "."
        return 0 unless index
        return number.length-index-1
      end

      # does column with caption exists in result
      def column_exists?(list)
        @column_options.select{|e| list.include?(e[:caption])}.length > 0
      end

      #Iterieren über Spalten des Results
      chart_x_axis_found = false
      @column_options.each do |col|
        isNumber = true
        isDate   = true
        scale    = 0                            # Anzahl Nachkommastellen
        @res.each do |r|                         # Iteration über Zeilen des Results
          fieldval = r[col[:caption]]              # Aktueller Feldinhalt

          if isNumber && fieldval.class!=Integer && fieldval.class.name !='Fixnum' && fieldval.class!=BigDecimal && fieldval.class!=NilClass    # Prüfen auf alle Werte der Spalte numerisch
            isNumber = false;
          else
            if fieldval.class.name =="BigDecimal" && scale_count(fieldval) > scale
              scale = scale_count(fieldval)
            end
          end

          if isDate && fieldval.class.name!="Time" && fieldval.class.name!="NilClass" # Prüfen auf alle Werte Zeitstempel
            isDate = false
          end
        end

        case
          when sql_id_captions.select{|s| col[:caption].downcase[s]}.length > 0 then

            col[:data] = proc{|rec|
                                inst_id = nil
                                inst_id = rec["inst_id"]            if rec["inst_id"]
                                inst_id = rec["instance_number"]    if rec["instance_number"]
                                inst_id = rec["Instance"]           if rec["Instance"]
                                #inst_id = current_instance_number   if inst_id.nil? # Default wenn nicht anders belegt  ### Inst_ID auch Null zulassen jetzt

                                time_selection_start = localeDateTime(Time.new - (24*60*60*8), :minutes)                                # Default-Start 8 Tage rückwärts
                                time_selection_start = localeDateTime(rec['first_occurrence'], :minutes) if rec['first_occurrence']     # Überschrieben mit Wert aus Record wenn belegt
                                time_selection_start = localeDateTime(rec['first occurrence'], :minutes) if rec['first occurrence']     # Überschrieben mit Wert aus Record wenn belegt
                                time_selection_start = localeDateTime(rec['First Occurrence'], :minutes) if rec['First Occurrence']     # Überschrieben mit Wert aus Record wenn belegt

                                time_selection_end   = localeDateTime(Time.new, :minutes)                                               # Default-Ende jetzt
                                time_selection_end   = localeDateTime(rec['last_occurrence'], :minutes) if rec['last_occurrence']       # Überschrieben mit Wert aus Record wenn belegt
                                time_selection_end   = localeDateTime(rec['last occurrence'], :minutes) if rec['last occurrence']       # Überschrieben mit Wert aus Record wenn belegt
                                time_selection_end   = localeDateTime(rec['Last Occurrence'], :minutes) if rec['Last Occurrence']       # Überschrieben mit Wert aus Record wenn belegt

                                parsing_schema_name = nil
                                parsing_schema_name = rec['parsing_schema_name'] if rec['parsing_schema_name']

                                con_id = nil
                                con_id = rec['con_id'] if rec['con_id']

                                #link_sql_id('exec_dragnet_sql_detail_area', inst_id, my_html_escape(rec[col[:caption]]))

                                link_current_or_historic_sql_id(:exec_dragnet_sql_detail_area, inst_id, my_html_escape(rec[col[:caption]]), time_selection_start, time_selection_end, parsing_schema_name, con_id)

                                #link_historic_sql_id(inst_id,
                                #                     my_html_escape(rec[col[:caption]]) ,
                                #                     time_selection_start,
                                 #                    time_selection_end,
                                 #                    :exec_dragnet_sql_detail_area
                                #)

                             }
          when ['table_name', 'table name', 'tablename', 'referenced table', 'table-name', 'log_table',
                'object_name', 'master_table', 'sequence_name', 'view_name', 'object according to ash', 'object according to sql plan', 'target_table'
               ].include?(col[:caption].downcase) ||
            col[:caption].downcase['_view']
          then
            col[:data] = proc{|rec|
                                table_name = rec[col[:caption]]
                                owner = nil                                     # Default

                                if !table_name.nil? && table_name['.']          # extract schema and tablename from schema.tablename
                                  owner = table_name[0, table_name.index('.')]
                                  table_name = table_name[table_name.index('.'), table_name.length].delete('.').strip # extract tablename without leading . and whitespaces
                                end

                                owner = rec['table_owner']          if rec['table_owner']     && !owner
                                owner = rec['Table owner']          if rec['Table owner']     && !owner
                                owner = rec['object_owner']         if rec['object_owner']    && !owner
                                owner = rec['owner']                if rec['owner']           && !owner
                                owner = rec['Owner']                if rec['Owner']           && !owner
                                owner = rec['Owner']                if rec['Owner']           && !owner
                                owner = rec['sequence_owner']       if rec['sequence_owner']  && !owner
                                owner = rec['log_owner']            if rec['log_owner']       && !owner
                                if owner
                                  link_object_description(:exec_dragnet_sql_detail_area, owner, my_html_escape(table_name), my_html_escape(rec[col[:caption]]))
                                else
                                  my_html_escape(rec[col[:caption]])            # Ohne Link
                                end
                             }
          # Check for link on index_name
          when ['index_name'].include?(col[:caption].downcase)
          then
            col[:data] = proc{|rec|
                                index_name = rec[col[:caption]]
                                owner = nil                                     # Default

                                if !index_name.nil? && index_name['.']          # extract schema and tablename from schema.tablename
                                  owner = index_name[0, index_name.index('.')]
                                  index_name = index_name[index_name.index('.'), index_name.length].delete('.').strip # extract tablename without leading . and whitespaces
                                end

                                owner = rec['index_owner']          if rec['index_owner']     && !owner
                                owner = rec['owner']                if rec['owner']           && !owner
                                owner = rec['Owner']                if rec['Owner']           && !owner
                                owner = rec['Owner']                if rec['Owner']           && !owner
                                if owner
                                  link_object_description(:exec_dragnet_sql_detail_area, owner, my_html_escape(index_name), my_html_escape(rec[col[:caption]]))
                                else
                                  my_html_escape(rec[col[:caption]])            # Ohne Link
                                end
                             }
          when sid_captions.include?(col[:caption].downcase) && column_exists?(serial_number_captions) && column_exists?(instance_captions)
          then
            col[:data] = proc do |rec|
              instance = nil
              instance_captions.each do |snc|
                instance = rec[snc] if rec[snc]
              end

              serial_no = nil
              serial_number_captions.each do |snc|
                serial_no = rec[snc] if rec[snc]
              end
              link_session_details(:exec_dragnet_sql_detail_area, instance, rec[col[:caption]], serial_no, print_val: fn(rec[col[:caption]]))
#"#{instance}, #{serial_no}"
            end
            col[:align] = :right
          when isNumber then
            col[:data] = proc{|rec| formattedNumber(rec[col[:caption]], scale)}
            col[:align] = :right
          when isDate then
            col[:data] = proc{|rec| localeDateTime(rec[col[:caption]])}
            unless chart_x_axis_found
              col[:plot_master_time] = true
              chart_x_axis_found = true
            end
        else
          col[:data] = proc{|rec| my_html_escape(rec[col[:caption]]) }
        end
      end

%>

<%= gen_slickgrid(@res, @column_options, {:caption => @caption, :plot_area_id => "exec_dragnet_sql_detail_area", :max_height=>450, show_pin_icon: 1}) %>

<div id='exec_dragnet_sql_detail_area'  style="padding-top: 5px;"></div>

<%
else
%>
<%= t(:dragnet_list_dragnet_sql_result_no_result, :default=>'No result for SQL') %>
<%
end
%>



