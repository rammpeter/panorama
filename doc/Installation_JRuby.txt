Installation RubyOnRails-Applikation NOA mittels JRuby

Peter Ramm, OSP Dresden, 07.09.2009

###### ToDo's auf Build-Maschine ######
=> Installation JRuby als root z.B. unter /opt
   > Download JRuby als tar.gz von jruby.codehaus.org, aktuell Version 1.7.2
   > Entpacken als root unter /opt
   > Anlegen Datei /etc/profile.d/jruby.sh mit Inhalt:
      export JRUBY_HOME=/opt/jruby-1.7.2
      export PATH=$PATH:$JRUBY_HOME/bin"

=> Sicherstellen, dass http_proxy gesetzt ist
=> Installation der notwendigen gem-Applikationen als User "root" (neu anmelden wegen Pfad):
   > jruby -S gem install rails                                 # Entsprechend Vorgabe in Gemfile
   > jruby -S gem install mongrel                               # nur fuer Test-Zwecke noetig
   > jruby -S gem install activerecord-oracle_enhanced-adapter  # Entsprechend Vorgabe in Gemfile
   > jruby -S gem install activerecord-jdbcsqlite3-adapter      # Entsprechend Vorgabe in Gemfile
   > jruby -S gem install therubyrhino                          # Serverside Javascript-Engine fuer Asset-Pipeline etc. (auf Mac nicht zwingend erforderlich)

   > optional entfernen Gemfile.lock f체r Neuerzeugung der Abh채ngigkeiten
   > jruby -S bundle install                                    # Aktualisiert Gemfile.lock auf Basis der aktuellen Dependencies
   > jruby -S bundle install --deployment                       # Aktualisiert Gems unter vendor/bundle, Aktuell nicht genutzt

=> Lokales Betreiben (z.B. Test-Instanz)
   > cd <Root des Rails-Verzeichnis>
   > jruby -S rails server
   
=> Erzeugen und deployen war-File mittels Warbler
   > jruby -S gem install warbler  # als Root, aktuell 1.3.6
   > jruby -S gem install jruby-openssl
   > cd <Root des Rails-Verzeichnis>
   # Bauen des Panorama.war, basierend auf ../config/warble.rb
   > jruby -S warble
   # wenn Kopierfehler auftreten, dann: 
   #  - jruby -S warble war:clean oder 
   #  - manuelles Ruecksetzen des Schreibschutzes des Ziel-Files mit "chmod u+w <file>"
   # Warbler hat leider ein Problem mit dem Schreibschutz

###### ToDo's auf Ziel-Maschine f체r Glassfish ######
   # Installation Glassfish-Applicationserver
   # Anpassen der Domain-Konfiguration in glassfish/domains/domain1/config/domain.xml :
   #   Anpassen Eintrag <jvm-options>-Xmx512m</jvm-options>            unter "java_config" auf passenden Wert > 512 MB wenn noetig
   #   Anpassen Eintrag <jvm-options>-XX:MaxPermSize=192m</jvm-options> unter "java_config" auf mindestens 256m setzen
   #   Hinzufuegen      <jvm-options>-XX:+CMSClassUnloadingEnabled</jvm-options>    um out of PermGen memory zu minimieren
   #   Hinzufuegen      <jvm-options>-XX:+CMSPermGenSweepingEnabled</jvm-options>   um out of PermGen memory zu minimieren
   # Starten Applicationserver
   > <AS_INSTALL>/bin/asadmin start-domain
   # Deployen Applikation
   > <AS_INSTALL>/bin/asadmin deploy --force=true <Verzeichnis>/Panorama.war

   > Starten Browser: http://<host>:8080

   # Vorsicht: Mehrfaches Deployen frisst PermGen-Memory auf, sinnvoll: nach Deployen Glassfish durchstarten


=> Alternativer Betrieb mit Glassfish v3 als gem statt Deployment in vorhandenem AppServer
   > jruby -S gem install glassfish      # als root ausfuehren
   > cd <Root des Rails-Verzeichnis>
   # als root ausfueren fuer Port < 1024
   > jruby -S glassfish -p <Port> -e production --runtimes-min 10 --runtimes-max 20 -n 10

###### ToDo's auf Ziel-Maschine f체r jetty ######
    # Javascript-Interpreter NodeJS installieren, falls System ein Linux-System ist
    > java -XX:MaxPermSize=256M -jar Panorama.war | tee -a log/jetty.log

####### Bugfixing #########
/Users/ramm/Library/jruby-1.6.4/lib/ruby/gems/1.8/gems/activerecord-oracle_enhanced-adapter-1.4.0/lib/active_record/connection_adapters/oracle_enhanced_base_ext.rb:91
Fixen wegen SQLite virtual? Anleitung: