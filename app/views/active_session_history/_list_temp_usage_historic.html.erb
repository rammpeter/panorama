<% @update_area = get_unique_area_id %>

<%
  @header = "TEMP usage by sessions in status \"ACTIVE\"<br/><br/>Total size of #{@groupfilter[:Temp_TS] ? @groupfilter[:Temp_TS] : "all temp files"} = #{fn @total_temp_mb} MB"
  @repeat_action = :list_temp_usage_historic

  @group_filter_addition = []

  @group_filter_addition << {
      :header  => 'Fuzzy seconds',
      :content =>  text_field_tag(:fuzzy_seconds, @fuzzy_seconds, :size=>3, :style=>'text-align: right')
  }

  grouping_content =  "<span title=\"#{t(:grouping_hint, :default=>'Group listing by attribute')}\">"
  grouping_content << '<select name="time_groupby">'
  temp_historic_grouping_options.each do |key, value|
    grouping_content  << "<option value=\"#{key}\" #{"selected='selected'" if key.to_sym==@time_groupby}>#{value}</option>"
  end
  grouping_content << "</select>"
  grouping_content << "</span>"

  @group_filter_addition << {
      :header  => t(:grouping, :default=>'Grouping'),
      :content => grouping_content
  }

%>

<%= render :partial => 'list_groupfilter' %>

<%
   def link_period_detail(rec, value)
     groupfilter = @groupfilter.clone
     groupfilter[:time_selection_start] = localeDateTime(rec.start_sample_time, :seconds)
     groupfilter[:time_selection_end]   = localeDateTime(rec.end_sample_time+1, :seconds)
     ajax_link(value,
                             {:action        => :list_temp_usage_historic,
                              :groupfilter   => groupfilter,
                              :time_groupby  => @time_groupby,
                              :fuzzy_seconds => @fuzzy_seconds,
                              :update_area   => @update_area
                             },
                     :title=>"Show values for > time period #{localeDateTime(rec.start_sample_time)} until #{localeDateTime(rec.end_sample_time)} in same structure. Than you can use a more detailed time grouping for this interval."
     )

   end

   def link_single_rows(rec)
     groupfilter = @groupfilter.clone
     groupfilter[:time_selection_start] = localeDateTime(rec.start_sample_time, :seconds)
     groupfilter[:time_selection_end]   = localeDateTime(rec.end_sample_time+1, :seconds)
     groupfilter[:Temp_Usage_MB_greater]  = 0
     ajax_link(fn(rec.sample_count),
                             {:action        => :list_session_statistic_historic_single_record,
                              :groupfilter   => groupfilter,
                              :update_area   => @update_area
                             },
                     :title=>"Show single ASH records for time period #{localeDateTime(rec.start_sample_time)} until #{localeDateTime(rec.end_sample_time)}"
     )

   end


   def link_wait_time(rec)
     groupfilter = @groupfilter.clone
     groupfilter[:time_selection_start]   = localeDateTime(rec.start_sample_time, :seconds)
     groupfilter[:time_selection_end]     = localeDateTime(rec.end_sample_time+1, :seconds)
     groupfilter[:Temp_Usage_MB_greater]  = 0
     ajax_link(fn(rec.time_waited_secs),
                             {:action        => :list_session_statistic_historic_grouping,
                              :groupfilter   => groupfilter,
                              :groupby       => 'Instance',
                              :update_area   => @update_area
                             },
                     :title=>"Show active session history for #{localeDateTime(rec.start_sample_time)} until #{localeDateTime(rec.end_sample_time)}"
     )
   end

   column_options =
    [
        {:caption=>'Start time',                                    :data=>proc{|rec| link_period_detail(rec, localeDateTime(rec.start_sample_time))},       :title=>'Start of time group', :data_title=>proc{|rec| "%t: End of time group = #{rec.end_sample_time}" }, :plot_master_time=>true },
        {:caption=>'Samples (ASH)',                                 :data=>proc{|rec| link_single_rows(rec)},                       :title=>'Number of ASH sample rows in time period of group',       :align=>'right'},
        {:caption=>'Total time waited',                             :data=>proc{|rec| link_wait_time(rec) },                        :title=>'Total time waited over all active sessions in time slice in seconds (sample-cycle(1/10 seconds) * samples)', :align=>"right", :show_pct_hint=>true},
        {:caption=>'Max. TEMP allocated MB (only active sessions)', :data=>proc{|rec| fn(rec.max_sum_temp_space_allocated)},        :title=>"Maximum allocated TEMP space in MB at one time in time period\nSum over all all sessions in active state at one time", data_title: proc{|rec| "%t\n#{size_explain(rec.max_sum_temp_space_allocated)}"}, :align=>'right'},
        {:caption=>'Max. TEMP allocated MB (fuzzy time related)',   :data=>proc{|rec| fn(rec.max_sum_temp_floating)},               :title=>"Maximum allocated TEMP space in MB at one time plus/minus #{@fuzzy_seconds} seconds in time period\nMaximum values plus/minus #{@fuzzy_seconds} seconds are considered to bypass the inaccuracy due to resource claiming by inactive sessions\n(that are not recorded by active session history).", data_title: proc{|rec| "%t\n#{size_explain(rec.max_sum_temp_floating)}"},   :align=>'right'},
        {:caption=>'Max. TEMP allocated per single session MB',     :data=>proc{|rec| fn(rec.max_temp_space_alloc_per_sess)},       :title=>'Maximum allocated TEMP space in MB one time in time slice by one single session in active state', data_title: proc{|rec| "%t\n#{size_explain(rec.max_temp_space_alloc_per_sess)}"},   :align=>'right'},
        {:caption=>'Avg. TEMP allocated per session MB',            :data=>proc{|rec| fn(rec.avg_temp_space_alloc_per_sess,1)},     :title=>'Average allocated TEMP space in MB for sessions in active state', data_title: proc{|rec| "%t\n#{size_explain(rec.avg_temp_space_alloc_per_sess)}"},   :align=>'right'},
    ]

%>

<%=
    gen_slickgrid(@result, column_options, {          :caption        => @caption,
                                                      :max_height     => 450,
                                                      :multiple_y_axes  => false,
                                                      show_pin_icon: 1,
                                                      update_area:   @update_area
    }
    )
%>


