<%
  @update_area=get_unique_area_id

  link_policy_name = proc do |rec|
    ajax_link(rec.policy_name, {
      action:             :list_audit_unified_policy_names,
      policy_name:        rec.policy_name,
      show_pin_icon:      1,
      update_area:        @update_area
    }, title: "Show the policy from Audit_Unified_Policies with this policy name" )
  end

  column_options =
    [
      {caption: 'Policy name',        data: link_policy_name,                                   title: 'Name of the audit policy'},
      {caption: 'Audit condition',    data: proc{|rec| rec.audit_condition },                   title: 'Condition associated with the audit policy'},
      {caption: 'Evaluation option',  data: proc{|rec| rec.condition_eval_opt},                 title: "Evaluation option associated with the audit policy's condition. The possible values are STATEMENT, SESSION, INSTANCE, and NONE."},
      {caption: 'Audit option',       data: proc{|rec| rec.audit_option},                       title: "Auditing option defined in the audit policy"},
      {caption: 'Audit option type',  data: proc{|rec| rec.audit_option_type},                  title: "Type of the auditing option."},
      {caption: 'Object schema',      data: proc{|rec| rec.object_schema},                      title: 'Owner of the object, for an object-specific auditing option'},
      {caption: 'Object name',        data:  proc{|rec| rec.object_name},                       title: 'Name of the object, for an object-specific auditing option'},
      {caption: 'Object type',        data:  proc{|rec| rec.object_type},                       title: 'Type of the object, for an object-specific auditing option'},
      {caption: 'Common',             data:  proc{|rec| rec.common},                            title: "Indicates whether the audit policy is a common audit policy or local audit policy. The value is NULL for a non-CDB.\nFor local audit policies, the value of the COMMON column is always NO.\nFor a CDB common policy:\n- If you query AUDIT_UNIFIED_POLICIES from the CDB root container, the value of the COMMON column will be YES and the value of the INHERITED column will be NO.\n- If you query AUDIT_UNIFIED_POLICIES from any other container besides the CDB root container, the value of the COMMON column and the INHERITED column will be YES.\nFor an application container common policy:\n- If you query AUDIT_UNIFIED_POLICIES from the application root container, the value of the COMMON column will be YES and the value of the INHERITED column will be NO.\n- If you query AUDIT_UNIFIED_POLICIES from any other container besides the application root container, the value of the COMMON column and the INHERITED column will be YES." },
      {caption: 'Inherited',          data:  proc{|rec| rec.inherited},                         title: 'Indicates whether the audit policy was inherited from another container (YES) or not (NO). This value is NULL for non-CDBs.'},
    ]
  column_options << {caption: 'Audit only toplevel',  data:  proc{|rec| rec.audit_only_toplevel},  title: 'Indicates whether the audit policy is defined to audit only top level SQL statements (YES) or both top level SQL statements and recursive SQL statements (NO)'} if get_db_version >= '19.1'
  # Used with rel. 19.11++ but not filtered with >= '19.11'
  column_options << {caption: 'Oracle supplied',      data:  proc{|rec| rec['oracle_supplied']},    title: "Indicates whether the audit policy is an Oracle-supplied policy (YES) or not (NO)\nOracle-supplied policies are also called predefined policies."} if get_db_version >= '19.1'
  column_options << {caption: 'Enabled option', data: proc{|rec| rec.enabled_option},                         title: "Enabled option of the audit policy. Possible values:\nBY USER: For policies that are enabled on users\nEXCEPT USER: For policies that are enabled on users\nBY GRANTED ROLE: For policies that are enabled on roles\nINVALID: For policies that are not enabled on either users or roles\nNO: Not enabled on any user or role (Records in Audit_Unified_Policies only)\n\nIf empty than the audit option is not active / enabled"}
  column_options << {caption: 'Entity name',    data: proc{|rec| rec.entity_name},                            title: "Database entity (user name or role name) on which the audit policy is enabled.\nWhen an audit policy is enabled on all database users, ALL USERS is displayed in this column."}
  column_options << {caption: 'Entity type',    data: proc{|rec| rec.entity_type},                            title: "Database entity type. Possible values:\nUSER: Indicates that the policy is enabled on a user or users.\nROLE: Indicates that the policy is enabled on a role or roles."}
  column_options << {caption: 'Success',        data: proc{|rec| rec.success},                                title: 'Indicates whether the audit policy is enabled for auditing successful events (YES) or not (NO)'}
  column_options << {caption: 'Failure',        data:  proc{|rec| rec.failure},                               title: 'Indicates whether the audit policy is enabled for auditing unsuccessful events (YES) or not (NO)'}

  caption = "Unified audit policy actions from Audit_Unified_Policies"
  filter = []
  filter << "policy name = '#{@policy_name}'"             if @policy_name
  filter << "audit option = '#{@audit_option}'"           if @audit_option
  filter << "audit option type = '#{@audit_option_type}'" if @audit_option_type
  filter << "object type = '#{@object_type}'"             if @policy_name
  filter << "owner = '#{@owner}'"                         if @owner
  filter << "object name = '#{@object_name}'"             if @object_name
  caption << " for " unless filter.empty?
  caption << filter.join(', ') unless filter.empty?

%>

<%=
  gen_slickgrid(@policies, column_options, {
    caption: caption,
    max_height: 450,
    show_pin_icon: 1
  })
%>

<div id="<%= @update_area %>"></div>
