<!-- Vom Aufrufer zu belegen: @header, @groupfilter, @last_action, @repeat_action,

    optional: @group_filter_addition, @group_filter_addition_header
-->
<%
  @time_selection_start_id = "time_selection_start_#{get_unique_area_id}"
  @time_selection_end_id   = "time_selection_end_#{get_unique_area_id}"

  # Ensure @group_filter_addition is Array
  if defined?(@group_filter_addition) && !@group_filter_addition.nil?
    @group_filter_addition = [@group_filter_addition] if @group_filter_addition.class != Array
  else
    @group_filter_addition = []
  end

  @caption = ""
  @caption << (ajax_form(controller:  :longterm_trend,
                         action:      :refresh_time_selection,
                         :groupby       => @groupby,                     # Gruppierungskriterium für einen Dialog
                         :groupfilter   => @groupfilter,
                         :update_area   => params[:update_area],         # Update_area des letzten Aufrufes wiederverwenden
                         repeat_controller: controller_name,
                         :repeat_action => @repeat_action                # Zuletzt aufgerufene action wiederholen
  ) do
    form_content = ""
    form_content << "<div class=\"float_left\">"
    form_content << @header
    form_content << "&nbsp;"
    form_content << "</div><div style=\"float:left;\">"
    form_content << "<table>"
    form_content << "<tr>"
    @groupfilter.each do|key,value|
        form_content << "<th title=\"Current active filter conditions for selection\">#{key}</th>".html_safe if key != :time_selection_start && key != :time_selection_end
    end
    form_content << "<th title=\"Current active filter conditions for selection\">Start time</th>"
    form_content << "<th title=\"Current active filter conditions for selection\">End time</th>"
    @group_filter_addition.each do |ga|
      form_content << "<th>"
      form_content << ga[:header]
      form_content << "</th>"
    end

    form_content << "<th></th></tr><tr>"
    @groupfilter.each do|key,value|
        if key != :time_selection_start && key != :time_selection_end
            input_id = get_unique_area_id
            form_content << "<td>"
            form_content << text_field_tag(key, value, {:id=>input_id, :size=>value.to_s.length+4, :title => (longterm_trend_key_rules[key] ? longterm_trend_key_rule(key)[:Title] : key) })
            form_content << submit_tag("x", {:onclick => "jQuery('##{input_id}').val('');", :title => "Refresh content without this filter", :style=>"color:red" })
            form_content << "</td>"
        end
    end
    form_content << "<td>"
    form_content << text_field_tag(:time_selection_start, @groupfilter[:time_selection_start], :size=>20, :id=>@time_selection_start_id, :title => "#{t(:time_selection_start_hint, :default=>'Start of considered time period in format')} '#{human_datetime_minute_mask}'")
    form_content << "</td><td>"
    form_content << text_field_tag(:time_selection_end,   @groupfilter[:time_selection_end]  , :size=>20, :id=>@time_selection_end_id,   :title => "#{t(:time_selection_end_hint, :default=>'End of considered time period in format')} '#{human_datetime_minute_mask}'")
    form_content << "</td><td>"

    @group_filter_addition.each do |ga|
      form_content << ga[:content]
      form_content << "</td><td>"
    end

    form_content << submit_tag("Refresh", :title => "Refresh content with changed parameters")
    form_content << "</td>"

    form_content << "</tr>"
    form_content << "</table>"
    form_content << "</div>"
    form_content << "<div style=\"clear: both;\"></div>"           # Umbruch ermöglichen, damit Grid nicht rechts angefügt wird
    form_content.html_safe
  end)

%>

<script type="text/javascript">
    // let create slickgrid with header at first, wenn refine elements in header
    setTimeout(
        () => {
            $("#<%= @time_selection_start_id %>").datetimepicker();
            $("#<%= @time_selection_end_id   %>").datetimepicker();
        }, 1000
    )
</script>


