<%

@update_area = get_unique_area_id

def link_column_stmt(rec, value)
  ajax_link(value, {
                        :action => "list_segment_stat_hist_sql",
                        :owner          => rec.owner,
                        :object_name    => rec.object_name,
                        :subobject_name => rec.subobject_name,
                        :instance       => rec.instance_number,
                        :time_selection_start => @time_selection_start,
                        :time_selection_end   => @time_selection_end,
                        :update_area    => @update_area
                        },
                :title => t(:dba_history_list_segment_stat_historic_sum_link_sql_hint, :default=>"show SQLs in time slice from #{PanoramaConnection.adjust_table_name('DBA_Hist_SQLStat')} with usage of object in explain plan")
)
end

def link_column_snap(rec, value)
  ajax_link(value, {
                        :action => "list_segment_stat_hist_detail",
                        :owner          => rec.owner,
                        :object_name    => rec.object_name,
                        :subobject_name => rec.subobject_name,
                        :instance       => rec.instance_number,
                        dbid:               @dbid,
                        :time_selection_start => @time_selection_start,
                        :time_selection_end   => @time_selection_end,
                        :min_snap_id    => rec.min_snap_id,
                        :max_snap_id    => rec.max_snap_id,
                        :update_area    => @update_area
                       },
                :title => t(:dba_history_list_segment_stat_historic_sum_snaps_hint, :default=>'Show data of single AWR snapshots of this object')
  )
end

def link_column_wait(rec, value)
  if rec.nvl_object_id      # Es wurde kein Object identifiziert, nur historische Object_ID geliefert
    value_filter = { :Current_Obj_No => rec.nvl_object_id }
  else
    if rec.subobject_name
      value_filter = {  :Owner => rec.owner.upcase, :Object_Name => rec.object_name, :SubObject_Name => rec.subobject_name }
    else
      value_filter = { :Owner => rec.owner.upcase, :Object_Name => rec.object_name }
    end
  end


  ajax_link(value, {
                        :controller     => :active_session_history,
                        :action         => :list_session_statistic_historic_grouping,
                        :groupfilter    => {
                                :DBID                   => get_dbid,
                                :Instance               => rec.instance_number,
                                :time_selection_start   => @time_selection_start,
                                :time_selection_end     => @time_selection_end,
                                :Min_Snap_ID            => rec.min_snap_id,
                                :Max_Snap_ID            => rec.max_snap_id,
                                :Idle_Wait1             => "PX Deq Credit: send blkd"
                        }.merge(value_filter),
                        :groupby        => "DB Object",
                        :update_area    => @update_area
                       },
                :title => t(:dba_history_list_segment_stat_historic_sum_link_wait_hint, :default=>"deeper details on incurred wait times of object from Active Session History")
  )
end

column_options =
  [
    {:caption=>"I",                             :data=>proc{|rec| rec.instance_number},                                                      :title=>"RAC-Instance"},
    {:caption=>"Object", :data=>proc{|rec| link_object_description(@update_area, rec.owner, rec.object_name, "#{rec.owner} . #{rec.object_name} #{rec.subobject_name ? "(#{rec.subobject_name})" : ""}")}, :title=>"Object-Owner, Name, Partition-Name (optional)", :data_title=>proc{|rec| "Type=#{rec.object_type}"} },
    {:caption=>"SQLs",                          :data=>proc{|rec| link_column_stmt(rec, fn(rec.sql_ids))},                                   :align=>:right, :title=>t(:dba_history_list_segment_stat_historic_sum_sqls_hint, :default =>"Total number of SQLs for this object in whole AWR history regardless of considered time slice")},
    {:caption=>"Num Rows",                      :data=>proc{|rec| formattedNumber(rec.num_rows)},                                            :align=>:right, :title=>"Number of Records for this object (from analyze-statistics)"},
    {:caption=>"Object size (MB)",              :data=>proc{|rec| formattedNumber(rec.mbytes,2)},                                            :align=>:right, :title=>"Physical size in MByte from DBA_Segments",     :show_pct_hint=>true},
    {:caption=>"Time waited",                   :data=>proc{|rec| link_column_wait(rec, formattedNumber(rec.time_waited_secs))},             :align=>:right, :title=>"Time waited in secs.", data_title: proc{|rec| "%t\n#{seconds_explain(rec.time_waited_secs)}"},            :show_pct_hint=>true, :show_pct_background=>true},
    {:caption=>"Avg. Time waited",              :data=>proc{|rec| link_column_wait(rec, formattedNumber(rec.time_waited_avg_ms,2))},    :align=>:right, :title=>"Average time waited per event in millisecs.", data_title: proc{|rec| "%t\n#{seconds_explain(rec.time_waited_avg_ms.to_f/1000)}"}},
    {:caption=>"AWR snaps.",                    :data=>proc{|rec| link_column_snap(rec, fn(rec.snaps))},                                     :align=>:right, :title=>'Number of AWR snapshots in considered period' },
    {:caption=>"Logical reads",                 :data=>proc{|rec| formattedNumber(rec.logical_reads_delta)},              :align=>:right, :title=>"Logical Reads",       :show_pct_hint=>true},
    {:caption=>"Buffer busy waits",             :data=>proc{|rec| formattedNumber(rec.buffer_busy_waits_delta)},          :align=>:right, :title=>"Buffer Busy Waits",   :show_pct_hint=>true},
    {:caption=>"Block changes",                 :data=>proc{|rec| formattedNumber(rec.db_block_changes_delta)},           :align=>:right, :title=>"DB Block Changes",    :show_pct_hint=>true },
    {:caption=>"Physical reads nondirect",      :data=>proc{|rec| formattedNumber(rec.physical_reads_delta-rec.physical_reads_direct_delta)},   :align=>:right,  :title=>"Physical Reads Non-Direct", :show_pct_hint=>true},
    {:caption=>"Physical reads direct",         :data=>proc{|rec| formattedNumber(rec.physical_reads_direct_delta)},      :align=>:right, :title=>"Physical Reads Direct",:show_pct_hint=>true},
    {:caption=>"Physical writes nondirect",     :data=>proc{|rec| formattedNumber(rec.physical_writes_delta-rec.physical_writes_direct_delta)},        :align=>:right, :title=>"Physical Writes Non-Direct",     :show_pct_hint=>true},
    {:caption=>"Physical writes direct",        :data=>proc{|rec| formattedNumber(rec.physical_writes_direct_delta)},     :align=>:right, :title=>"Physical Writes Direct",   :show_pct_hint=>true},
    {:caption=>"ITL",                           :data=>proc{|rec| formattedNumber(rec.itl_waits_delta)},                  :align=>:right, :title=>"ITL Waits",                :show_pct_hint=>true},
    {:caption=>"Row lock waits",                :data=>proc{|rec| formattedNumber(rec.row_lock_waits_delta)},             :align=>:right, :title=>"Row Lock Waits",           :show_pct_hint=>true},
    {:caption=>"GC buffer busy waits",          :data=>proc{|rec| formattedNumber(rec.gc_buffer_busy_delta)},             :align=>:right, :title=>"Global cache buffer busy waits",     :show_pct_hint=>true},
    {:caption=>"GC CR blocks received",         :data=>proc{|rec| formattedNumber(rec.gc_cr_blocks_received_delta)},      :align=>:right, :title=>'Global cache blocks received in consistent mode',:show_pct_hint=>true},
    {:caption=>"GC CU blocks received",         :data=>proc{|rec| formattedNumber(rec.gc_cu_blocks_received_delta)},      :align=>:right, :title=>'Global cache blocks received in cureent mode',:show_pct_hint=>true},
    {:caption=>"Max. space used (MB)",          :data=>proc{|rec| formattedNumber(rec.max_space_used_total_mb, 2)},       :align=>:right, :title=>"Max. space used within time slice in MByte (sum over partition maxima)",    :show_pct_hint=>true},
    {:caption=>"Max. space allocated (MB)",     :data=>proc{|rec| formattedNumber(rec.max_space_allocated_total_mb,2)},   :align=>:right, :title=>"Max. space allocated within time slice in MByte (sum over partition maxima)",  :show_pct_hint=>true},
    {:caption=>"Space allocated delta (MB)",    :data=>proc{|rec| formattedNumber(rec.space_allocated_delta_mb,2)},       :align=>:right, :title=>"Difference for space allocated between last and first sample in time slice",  :show_pct_hint=>true},
    {:caption=>"Full table scans",              :data=>proc{|rec| formattedNumber(rec.table_scans_delta)},                :align=>:right, :title=>"Number of full table scans",              :show_pct_hint=>true},
  ]

%>

<%= gen_slickgrid(@segment_sums, column_options, {
        :max_height => 450,
        :caption => "Segment statistics from #{PanoramaConnection.adjust_table_name('DBA_Hist_Seg_Stat')}#{", Inst_ID=#{@instance}" if @instance}, from #{@time_selection_start} until #{@time_selection_end}",
        show_pin_icon: 1,
        update_area: @update_area
}) %>


