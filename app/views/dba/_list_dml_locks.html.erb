<%
   @update_area = get_unique_area_id

    def link_column_sid(rec)
      ajax_link("#{rec.instance_number}:#{rec.sid},#{rec.serial_no}", {
                 :action            => "show_session_detail",
                 :instance          => rec.inst_id,
                 :sid               => rec.sid,
                 :serial_no          => rec.serial_no,
                 :update_area       => @update_area
                },
         :title => t(:dba_list_dml_locks_link_sid_hint, :default=>'List details for session')
       )
    end

   # TODO statt html-Inhalten Data des Grid verÃ¤ndern
   def link_column_module(rec)
     local_update_area = "explain_module_info_#{rec.rownum}"
     ajax_link(rec.module, {
               :action => :explain_info,
               :info=>rec.module,
               :update_area=>local_update_area
       },
     :title => t(:dba_list_dml_locks_link_module_hint, :default=>'Further explanation for module') ) + "<div id=\"#{local_update_area}\"></div>".html_safe
   end

   def link_column_action(rec)
     local_update_area = "explain_action_info_#{rec.rownum}"
     ajax_link(rec.action, {
               :action => :explain_info,
               :info=>rec.action,
               :update_area=>local_update_area
       },
     :title => t(:dba_list_dml_locks_link_action_hint, :default=>'Further explanation for action') ) + "<div id=\"#{local_update_area}\"></div>".html_safe
   end

   def link_column_blocking_sid(rec)
     ajax_link(rec.blocking_instance_number ? "#{rec.blocking_instance_number}:#{rec.blocking_sid},#{rec.blocking_serial_no}" : "", {
              :action            => "show_session_detail",
              :instance          => rec.blocking_instance_number,
              :sid               => rec.blocking_sid,
              :serial_no          => rec.blocking_serial_no,
              :update_area       => @update_area
             },
      :title => t(:dba_list_dml_locks_link_sid_hint, :default=>'List details for session')
    )
   end

   def link_column_blocking_object_rowid(rec)
     unless rec.waitingforobject
           ""
     else
       ajax_link("Row_Wait_File#=#{rec.row_wait_file_no}, Row_Wait_Block#=#{rec.row_wait_block_no}, Row_Wait_Row#=#{rec.row_wait_row_no}", {
                                 :action           => :convert_to_rowid,
                                 :update_area      => "lockdetail_#{rec.row_num}",
                                 :waitingforobject => rec.waitingforobject,
                                 :data_object_id   => rec.data_object_id,
                                 :row_wait_file_no => rec.row_wait_file_no,
                                 :row_wait_block_no => rec.row_wait_block_no,
                                 :row_wait_row_no  => rec.row_wait_row_no
                         },
                         :title=>t(:dba_list_dml_locks_link_column_blocking_object_hint, :default=>"Determine associated rowid")
            )+"<div id=\"lockdetail_#{rec.row_num}\"></div>".html_safe
     end
   end

   def show_locked_object(rec)
     if rec.locked_object_name
       link_object_description(
               @update_area,
               rec.locked_object_owner,
               rec.locked_object_name,
               "#{rec.locked_object_owner}.#{rec.locked_object_name}#{" (#{rec.locked_subobject_name})" if rec.locked_subobject_name}"
       )
     else
       "RBS: #{rec.rollback_segment}"
     end
   end

  column_options =
    [
      {:caption=>"SID/SN",      :data=>proc{|rec| link_column_sid(rec)},                  :title=>"Instance : SID, Serial_No"},
      {:caption=>"Client-Info", :data=>proc{|rec| rec.client_info},                       :title=>t(:dba_list_dml_locks_client_info_hint, :default=>'Client info of session') },
      {:caption=>"Module",      :data=>proc{|rec| link_column_module(rec)},               :title=>t(:dba_list_dml_locks_module_hint, :default=>'Module info of session') },
      {:caption=>"Action",      :data=>proc{|rec| link_column_action(rec)},               :title=>t(:dba_list_dml_locks_action_hint, :default=>'Action info of session') },
      {:caption=>"Status",      :data=>proc{|rec| rec.status},                            :title=>t(:dba_list_dml_locks_status_hint, :default=>'Status of session') },
      {:caption=>"Object",      :data=>proc{|rec| show_locked_object(rec)},               :title=>t(:dba_list_dml_locks_object_hint, :default=>'Affected object'), :data_title=>proc{|rec| "%t: Type=#{rec.locked_object_type}"} },
      {:caption=>"User",        :data=>proc{|rec| rec.instpiduser},                       :title=>t(:dba_list_dml_locks_pid_hint, :default=>'RAC-instance:PID of shadow-process:Oracle-user') },
      {:caption=>"Maschine",    :data=>proc{|rec| rec.maschinepidprog},                   :title=>t(:dba_list_dml_locks_machine_hint, :default=>'Machine:PID of user-process:prozess name'), :data_title=>proc{|rec| rec.maschinepidprogfull} },
      {:caption=>"LT",          :data=>proc{|rec| rec.locktype},                          :title=>"Lock Type",                   :data_title=>proc{|rec| lock_types(rec.locktype)} },
      {:caption=>"Time wait.",  :data=>proc{|rec| fn(rec.waitingfortime, 3)},             :title=>t(:dba_list_dml_locks_time_hint, :default=>'Wait time in seconds for lock respectively since end of last wait event'), data_title: proc{|rec| "%t\n#{seconds_explain(rec.waitingfortime)}" }, :align=>"right"},
      {:caption=>"Lock held",   :data=>proc{|rec| fn(rec.lock_held_seconds)},             :title=>"Time in seconds since lock was granted", :align=>"right"},
      {:caption=>"ID1ID2",      :data=>proc{|rec| rec.id1id2},                            :title=>t(:dba_list_dml_locks_link_id12_hint, :default=>'ID1 and ID2 of lock') },
      {:caption=>"R",           :data=>proc{|rec| rec.request},                           :title=>"Request: !=0 indicates waiting for resource determinded by ID1, ID2", :data_title=>proc{|rec| lock_modes(rec.request)} },
      {:caption=>"L",           :data=>proc{|rec| rec.lockmode},                          :title=>"Lock-Modus",                 :data_title=>proc{|rec| lock_modes(rec.lockmode)} },
      {:caption=>"Blocking SID",:data=>proc{|rec| link_column_blocking_sid(rec)},         :title=>t(:dba_list_dml_locks_blocking_sid_hint, :default=>'Instance and SID of blocking session (the session this session waits for)') },
      {:caption=>"Blocking Object",:data=>proc{|rec| "<span style='float:left;'>#{rec.waitingforobject}</span> #{link_column_blocking_object_rowid(rec)}"},   :title=>t(:dba_list_dml_locks_blocking_object_hint, :default=>'Ressource this session waits for') },
   ]

%>
<%= gen_slickgrid(@dml_locks, column_options, {
        :caption =>  "DML Database locks (from GV$Lock)",
        :max_height=>450,
        show_pin_icon: 1,
        update_area:   @update_area
})
%>
